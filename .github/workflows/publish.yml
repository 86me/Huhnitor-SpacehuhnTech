name: Build and publish binaries to release page

on:
  push:
    tags:
      - '*'
env:
  NAME: huhnitor
  FILE: huhnitor
  HOMEBREW: spacehuhntech/homebrew-huhnitor
  REPOSITORY: spacehuhntech/Huhnitor

jobs:

  version-check:
    name: "Check version number"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Read version numbers
        run: |
          echo ::set-env name=APP_VERSION::${GITHUB_REF/refs\/tags\//}
          echo ::set-env name=SNAP_VERSION::$(grep -E "version: '[0-9]?.[0-9]?.[0-9]?'$" snapcraft.yaml | grep -oE "[0-9]?\.[0-9]?\.[0-9]?")
          echo ::set-env name=RELEASE_VERSION::$(grep -E "version = \"[0-9]?.[0-9]?.[0-9]?\"$" Cargo.toml | grep -oE "[0-9]?\.[0-9]?\.[0-9]?")

      - name: Cancel build
        if: env.RELEASE_VERSION != env.APP_VERSION || env.RELEASE_VERSION != env.SNAP_VERSION
        uses: andymckay/cancel-action@0.2

      - name: Fail job
        if: env.RELEASE_VERSION != env.APP_VERSION
        run: | 
          echo "Cargo.toml: ${{ env.APP_VERSION }}"
          echo "Snapcraft version: ${{ env.SNAP_VERSION }}"
          echo "Release tag version: ${{ env.RELEASE_VERSION }}"
          exit 1

  publish-linux:
    name: "Publish Linux binary"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Read version number
        run: echo ::set-env name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Update APT
        run: sudo apt-get update
      - name: Install libdev
        run: sudo apt-get install -y libudev-dev

      - name: Build
        run: cargo build --release

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/${{ env.NAME }}
          asset_name: ${{ env.FILE }}_${{ env.VERSION }}_linux
          tag: ${{ github.ref }}

  publish-mac:
    name: "Publish MacOS binary"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Build
        run: cargo build --release

      - name: Read version number
        run: echo ::set-env name=VERSION::${GITHUB_REF/refs\/tags\//}
        
      - name: Archive
        run: tar -czf target/release/${{ env.NAME }}-mac.tar.gz target/release/${{ env.NAME }}

      - name: Get the hash
        run: echo ::set-env name=CHECKSUM::$(shasum -a 256 target/release/${{ env.NAME }}-mac.tar.gz | cut -d ' ' -f 1)

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/${{ env.NAME }}-mac.tar.gz
          asset_name: ${{ env.FILE }}_${{ env.VERSION }}_mac.tar.gz
          tag: ${{ github.ref }}

      - name: Notify homebrew
        run: |
          curl -X POST https://api.github.com/repos/${{ env.HOMEBREW }}/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.ACCESS_TOKEN }} \
          --data '{"event_type": "release", "client_payload": { "version": "${{ env.VERSION }}", "hash": "${{ env.CHECKSUM }}", "url": "https://github.com/${{ env.REPOSITORY }}/releases/download/${{ env.VERSION }}/${{ env.FILE }}-${{ env.VERSION }}-mac.tar.gz"}}'

  publish-win:
    name: "Publish Windows binary"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      
      - name: Read version number
        uses: olegtarasov/get-tag@v2
      - name: Build
        run: cargo build --release

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/${{ env.NAME }}.exe
          asset_name: ${{ env.FILE }}_${{ env.GIT_TAG_NAME }}_windows.exe
          tag: ${{ github.ref }}
